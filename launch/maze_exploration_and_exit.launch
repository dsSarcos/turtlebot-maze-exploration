<launch>
  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
  <!--<arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>-->
  <arg name="configuration_basename" default="turtlebot3_lds_2d_gazebo.lua"/>
  <arg name="open_rviz" default="true"/>
  <arg name="map_number" default="none" doc ="maze world to start [none, 1, 2]"/> 

  <arg name="x_pos" default="-1.5"/>
  <arg name="y_pos" default="1.5"/>

  <!-- Start Gazebo and load world -->
  <group if="$(eval arg('map_number') != 'none')"> 
    <include file="$(find maze_simulation)/launch/maze_world_$(arg map_number).launch"/>
  </group>

  <!-- TurtleBot3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
  </include>

  <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
  <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="configuration_basename" value="$(arg configuration_basename)"/>
  </include>
  <param name="hector_mapping/map_update_angle_thresh" value="0.0" if="$(eval arg('slam_methods') == 'hector')"/>

  <!--Move Base-->
  <!-- Arguments -->
  <arg name="cmd_vel_topic" default="/cmd_vel" />
  <arg name="odom_topic" default="odom" />
  <arg name="move_forward_only" default="false"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    <param name="local_costmap/global_frame" value="map" if="$(eval arg('slam_methods') == 'hector')"/>
  </node>
  <param name="move_base/allow_unknown" value="false"/>
  <param name="move_base/recovery_behavior_enabled" value="false"/>
  <param name="/move_base/global_costmap/inflation_layer/inflate_unknown" value="true"/>
  <param name="/move_base/local_costmap/inflation_layer/inflate_unknown" value="true"/>
  <param name="/move_base/clearing_rotation_allowed" value="false"/>


  <!-- rviz. Hardcoded to be used with gmapping -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find maze_simulation_sarcos_baden)/rviz/turtlebot3_gmapping_with_frontierPoints.rviz"/>
  </group>

  <!--Hector -->
  <node pkg="hector_compressed_map_transport" type="map_to_image_node" name="map_to_image"/>

  <!-- Nodes implemented by us (i.e. from maze_simulation_sarcos_baden) -->
  <node name="motion_controller" pkg="maze_simulation_sarcos_baden" type="motion_controller.py"/>
  <node name="task_manager" pkg="maze_simulation_sarcos_baden" type="task_manager.py"/>
  <node name="maze_manager" pkg="maze_simulation_sarcos_baden" type="maze_manager.py"/>
  <!--<node name="exploration_manager" pkg="maze_simulation_sarcos_baden" type="exploration_manager.py"/>-->
  <node name="map_coverage" pkg="maze_simulation" type="get_map_coverage.py/>"/>

</launch>